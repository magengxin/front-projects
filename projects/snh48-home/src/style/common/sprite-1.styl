/*
Stylus variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon_home_width;
}

The large array-like variables contain all information about a single icon
$icon_home = x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet = width height image $spritesheet_sprites;
*/
$ercode_name = 'ercode';
$ercode_x = 9.05rem;
$ercode_y = 0;
$ercode_offset_x = -9.05rem;
$ercode_offset_y = 0;
$ercode_width = 3.8rem;
$ercode_height = 4.775rem;
$ercode_total_width = 12.85rem;
$ercode_total_height = 6.475rem;
$ercode_image = '../image/sprite-1.png';
$ercode = 9.05rem 0 -9.05rem 0 3.8rem 4.775rem 12.85rem 6.475rem '../image/sprite-1.png?v=5' 'ercode';
$icon_name = 'icon';
$icon_x = 0;
$icon_y = 3.25rem;
$icon_offset_x = 0;
$icon_offset_y = -3.25rem;
$icon_width = 8.275rem;
$icon_height = 2.5rem;
$icon_total_width = 12.85rem;
$icon_total_height = 6.475rem;
$icon_image = '../image/sprite-1.png';
$icon = 0 3.25rem 0 -3.25rem 8.275rem 2.5rem 12.85rem 6.475rem '../image/sprite-1.png?v=5' 'icon';
$logo_name = 'logo';
$logo_x = 0;
$logo_y = 0;
$logo_offset_x = 0;
$logo_offset_y = 0;
$logo_width = 9rem;
$logo_height = 3.2rem;
$logo_total_width = 12.85rem;
$logo_total_height = 6.475rem;
$logo_image = '../image/sprite-1.png';
$logo = 0 0 0 0 9rem 3.2rem 12.85rem 6.475rem '../image/sprite-1.png?v=5' 'logo';
$title_call_name = 'title-call';
$title_call_x = 0;
$title_call_y = 5.8rem;
$title_call_offset_x = 0;
$title_call_offset_y = -5.8rem;
$title_call_width = 4.575rem;
$title_call_height = 0.675rem;
$title_call_total_width = 12.85rem;
$title_call_total_height = 6.475rem;
$title_call_image = '../image/sprite-1.png';
$title_call = 0 5.8rem 0 -5.8rem 4.575rem 0.675rem 12.85rem 6.475rem '../image/sprite-1.png?v=5' 'title-call';
$spritesheet_width = 12.85rem;
$spritesheet_height = 6.475rem;
$spritesheet_image = 'NaNrem';
$spritesheet_sprites = $ercode $icon $logo $title_call;
$spritesheet = 12.85rem 6.475rem '../image/sprite-1.png' $spritesheet_sprites;

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  spriteWidth($icon_home)
}

.icon-email {
  sprite($icon_email)
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
spriteWidth($sprite) {
  width: $sprite[4];
}

spriteHeight($sprite) {
  height: $sprite[5];
}

spritePosition($sprite) {
  background-position: $sprite[2] $sprite[3];
}

spriteSize($sprite) {
  background-size: $sprite[6] $sprite[7];
}

spriteImage($sprite) {
  background-image: url($sprite[8]);
}

sprite($sprite) {
  spriteImage($sprite)
  spritePosition($sprite)
  spriteSize($sprite)
  spriteWidth($sprite)
  spriteHeight($sprite)
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of Stylus

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

sprites($spritesheet_sprites);
*/
sprites($sprites) {
  for $sprite in $sprites {
    $sprite_name = $sprite[9];
    .{$sprite_name} {
      sprite($sprite);
    }
  }
}

.icon-ercode
  sprite($ercode);
.icon-icon
  sprite($icon);
.icon-logo
  sprite($logo);
.icon-title-call
  sprite($title_call);
